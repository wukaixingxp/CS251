
(define (gen-list start stop)
          (if (< start stop)
              (cons start (gen-list(+ start 1) stop))
              (list stop)))

(define (pair-sum? lst val)
          (cond ((equal? (length lst) 1) #f)
            ((= val (+ (car lst) (car(cdr lst)))) 
              #t)
              (else (pair-sum? (cdr lst) val))))
(define gen-lazy-list
  (lambda (start stop)
    (if (> start stop)
        #f
        (cons start
            (gen-lazy-list (+ start 1) stop)))))
(gen-list 1 5)
(pair-sum? '(1 2 3) 1)
(gen-lazy-list 1 5)